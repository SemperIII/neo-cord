const socket = io();

// PeerJS –¥–ª—è WebRTC
let peer = null;
const peers = {};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
let audioContext = null;
let analyser = null;
let microphone = null;
let speaking = false;
let voiceActivityDetectionInterval = null;
const SPEAKING_THRESHOLD = 0.15; // –£–≤–µ–ª–∏—á–∏–ª–∏ –ø–æ—Ä–æ–≥
const SILENCE_DURATION = 300; // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
let silenceTimer = null;

// –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
window.DEBUG_VOICE = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PeerJS
function initPeer() {
    peer = new Peer({
        host: '0.peerjs.com',
        port: 443,
        path: '/',
        secure: true,
        debug: 3
    });

    peer.on('open', (id) => {
        console.log('‚úÖ PeerJS –ø–æ–¥–∫–ª—é—á–µ–Ω. ID:', id);
        socket.emit('peer-id', { peerId: id });
    });

    peer.on('connection', (conn) => {
        console.log('üîó Peer –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç:', conn.peer);
    });

    peer.on('call', (call) => {
        console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', call.peer);
        
        // –û—Ç–≤–µ—Ç–∏–º –Ω–∞ –∑–≤–æ–Ω–æ–∫ —Å –Ω–∞—à–∏–º –ø–æ—Ç–æ–∫–æ–º
        if (localStream) {
            call.answer(localStream);
        }
        
        call.on('stream', (remoteStream) => {
            console.log('üéß –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
            addAudioStream(remoteStream, call.peer);
        });
    });

    peer.on('error', (err) => {
        console.error('‚ùå PeerJS –æ—à–∏–±–∫–∞:', err);
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞
function addAudioStream(stream, peerId) {
    const audio = document.createElement('audio');
    audio.srcObject = stream;
    audio.autoplay = true;
    audio.className = 'remote-audio';
    audio.id = `audio-${peerId}`;
    document.body.appendChild(audio);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞
function removeAudioStream(peerId) {
    const audio = document.getElementById(`audio-${peerId}`);
    if (audio) {
        audio.remove();
    }
}

// –ó–≤–æ–Ω–æ–∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function callUser(peerId) {
    if (!localStream || !peer) return;
    
    console.log('üìû –ó–≤–æ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', peerId);
    
    const call = peer.call(peerId, localStream);
    
    call.on('stream', (remoteStream) => {
        console.log('üéß –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Ç:', peerId);
        addAudioStream(remoteStream, peerId);
    });
    
    call.on('close', () => {
        console.log('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å:', peerId);
        removeAudioStream(peerId);
    });
}

// –î–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function setupVoiceActivityDetection(stream) {
    try {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        microphone = audioContext.createMediaStreamSource(stream);
        
        microphone.connect(analyser);
        analyser.fftSize = 1024;
        analyser.smoothingTimeConstant = 0.8;
        
        const dataArray = new Uint8Array(analyser.frequencyBinCount);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        voiceActivityDetectionInterval = setInterval(() => {
            analyser.getByteFrequencyData(dataArray);
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
            let sum = 0;
            let count = 0;
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã (–≥–æ–ª–æ—Å–æ–≤—ã–µ)
            for (let i = 10; i < 100; i++) {
                if (dataArray[i] > 0) {
                    sum += dataArray[i];
                    count++;
                }
            }
            
            const average = count > 0 ? sum / count / 256 : 0;
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (window.DEBUG_VOICE) {
                console.log('–£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞:', average.toFixed(3), '–ü–æ—Ä–æ–≥:', SPEAKING_THRESHOLD);
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–æ–≤–æ—Ä–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (average > SPEAKING_THRESHOLD) {
                if (!speaking) {
                    speaking = true;
                    socket.emit('start-speaking');
                    console.log('üé§ –ù–∞—á–∞–ª–æ —Ä–µ—á–∏');
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–∏—à–∏–Ω—ã
                if (silenceTimer) {
                    clearTimeout(silenceTimer);
                    silenceTimer = null;
                }
                
            } else if (speaking) {
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–∏—à–∏–Ω—ã
                if (!silenceTimer) {
                    silenceTimer = setTimeout(() => {
                        speaking = false;
                        socket.emit('stop-speaking');
                        console.log('üé§ –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ—á–∏');
                        silenceTimer = null;
                    }, SILENCE_DURATION);
                }
            }
            
        }, 50);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function stopVoiceActivityDetection() {
    if (voiceActivityDetectionInterval) {
        clearInterval(voiceActivityDetectionInterval);
        voiceActivityDetectionInterval = null;
    }
    
    if (audioContext) {
        audioContext.close();
        audioContext = null;
    }
    
    speaking = false;
    analyser = null;
    microphone = null;
    
    if (silenceTimer) {
        clearTimeout(silenceTimer);
        silenceTimer = null;
    }
}

let currentUser = null;
let currentRoom = null;
let localStream = null;
let isInVoiceChat = false;

// –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
function toggleDebugMode() {
    window.DEBUG_VOICE = !window.DEBUG_VOICE;
    console.log('–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', window.DEBUG_VOICE);
    showNotification(`–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: ${window.DEBUG_VOICE ? '–í–ö–õ' : '–í–´–ö–õ'}`, 'info');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
async function checkMicrophoneAvailability() {
    try {
        if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
            return false;
        }
        
        const devices = await navigator.mediaDevices.enumerateDevices();
        const audioDevices = devices.filter(device => device.kind === 'audioinput');
        
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã:', audioDevices);
        
        return audioDevices.length > 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤:', error);
        return false;
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
function showTab(tabName) {
    document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    
    if (tabName === 'login') {
        document.querySelector('.tab:nth-child(1)').classList.add('active');
        document.getElementById('loginTab').classList.add('active');
    } else {
        document.querySelector('.tab:nth-child(2)').classList.add('active');
        document.getElementById('registerTab').classList.add('active');
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async function register() {
    const username = document.getElementById('registerUsername').value;
    const password = document.getElementById('registerPassword').value;
    const email = document.getElementById('registerEmail').value;

    if (!username || !password) {
        showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å', 'error');
        return;
    }

    try {
        const response = await fetch('/api/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password, email })
        });

        const data = await response.json();

        if (data.success) {
            showMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ', 'success');
            showTab('login');
        } else {
            showMessage(data.error, 'error');
        }
    } catch (error) {
        showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
    }
}

// –í—Ö–æ–¥
async function login() {
    const username = document.getElementById('loginUsername').value;
    const password = document.getElementById('loginPassword').value;

    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', username);

    if (!username || !password) {
        showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å', 'error');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    document.getElementById('loading').style.display = 'block';
    document.getElementById('authMessage').style.display = 'none';

    try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        
        const response = await fetch('/api/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password })
        });

        console.log('üì® –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –°—Ç–∞—Ç—É—Å:', response.status);

        const data = await response.json();
        console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);

        if (response.ok && data.success) {
            console.log('‚úÖ API –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
            currentUser = data.user;
            
            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è —á–µ—Ä–µ–∑ WebSocket
            console.log('üîê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é WebSocket...');
            socket.emit('authenticate', { userId: currentUser.id });
            
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', data.error);
            showMessage(data.error, 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
        showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
    } finally {
        document.getElementById('loading').style.display = 'none';
    }
}

// –í—ã—Ö–æ–¥
function logout() {
    if (isInVoiceChat) {
        leaveVoiceChat();
    }
    
    currentUser = null;
    socket.disconnect();
    
    document.getElementById('chatScreen').style.display = 'none';
    document.getElementById('authScreen').style.display = 'flex';
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    document.getElementById('loginUsername').value = '';
    document.getElementById('loginPassword').value = '';
    
    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    socket.connect();
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
function joinRoom(roomId, roomName) {
    if (!currentUser) return;
    
    socket.emit('join-room', roomId);
    currentRoom = roomId;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    document.querySelectorAll('.room-item').forEach(item => {
        item.classList.remove('active');
    });
    
    const roomElement = document.querySelector(`.room-item[data-id="${roomId}"]`);
    if (roomElement) {
        roomElement.classList.add('active');
    }
    
    document.getElementById('roomTitle').textContent = roomName;
    document.getElementById('messagesContainer').innerHTML = '';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
    loadOnlineUsers();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadOnlineUsers() {
    try {
        const response = await fetch('/api/online-users');
        const users = await response.json();
        updateOnlineUsersList(users);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function updateOnlineUsersList(users) {
    const onlineList = document.getElementById('onlineUsersList');
    const onlineCount = document.getElementById('onlineCount');
    
    onlineList.innerHTML = '';
    onlineCount.textContent = users.length;
    
    users.forEach(user => {
        const userItem = document.createElement('div');
        userItem.className = 'user-online-item';
        
        userItem.innerHTML = `
            <img class="user-online-avatar" src="${user.avatar}" alt="${user.username}">
            <span class="user-online-name">${user.username}</span>
            <span class="user-online-status ${user.status}"></span>
        `;
        onlineList.appendChild(userItem);
    });
}

// –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
async function joinVoiceChat() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        const hasMicrophone = await checkMicrophoneAvailability();
        if (!hasMicrophone) {
            throw new Error('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const constraints = {
            audio: {
                echoCancellation: true,
                noiseSuppression: true,
                sampleRate: 44100,
                channelCount: 1
            },
            video: false
        };

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try {
            localStream = await navigator.mediaDevices.getUserMedia(constraints);
        } catch (firstError) {
            console.log('–ü–æ–ø—ã—Ç–∫–∞ 1 –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', firstError);
            
            // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const simpleConstraints = {
                audio: true,
                video: false
            };
            
            try {
                localStream = await navigator.mediaDevices.getUserMedia(simpleConstraints);
            } catch (secondError) {
                console.log('–ü–æ–ø—ã—Ç–∫–∞ 2 –Ω–µ —É–¥–∞–ª–∞—Å—å:', secondError);
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞.');
            }
        }
        
        console.log('üé§ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await setupVoiceActivityDetection(localStream);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PeerJS
        initPeer();
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É
        socket.emit('join-voice');
        isInVoiceChat = true;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        document.getElementById('joinVoiceBtn').style.display = 'none';
        document.getElementById('leaveVoiceBtn').style.display = 'block';
        document.getElementById('voiceChatSidebar').style.display = 'flex';
        
        showNotification('üé§ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É', 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
        
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É';
        
        if (error.name === 'NotAllowedError') {
            errorMessage = '–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
        } else if (error.name === 'NotFoundError') {
            errorMessage = '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.';
        } else if (error.name === 'NotReadableError') {
            errorMessage = '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω.';
        }
        
        showNotification(errorMessage, 'error');
    }
}

// –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç - –≤—ã—Ö–æ–¥
function leaveVoiceChat() {
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localStream = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    stopVoiceActivityDetection();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (peer) {
        peer.destroy();
        peer = null;
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
    document.querySelectorAll('.remote-audio').forEach(audio => audio.remove());
    
    socket.emit('leave-voice');
    isInVoiceChat = false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    document.getElementById('joinVoiceBtn').style.display = 'block';
    document.getElementById('leaveVoiceBtn').style.display = 'none';
    document.getElementById('voiceChatSidebar').style.display = 'none';
    
    showNotification('üé§ –í—ã –≤—ã—à–ª–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞', 'warning');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
function toggleVoiceChat() {
    const voiceChat = document.getElementById('voiceChatSidebar');
    if (voiceChat.style.display === 'flex') {
        voiceChat.style.display = 'none';
    } else {
        voiceChat.style.display = 'flex';
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage() {
    if (!currentUser || !currentRoom) return;
    
    const input = document.getElementById('messageInput');
    const text = input.value.trim();
    
    if (text) {
        socket.emit('send-message', { text });
        input.value = '';
    }
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
function showMessage(text, type) {
    const messageDiv = document.getElementById('authMessage');
    messageDiv.textContent = text;
    messageDiv.className = `message ${type}`;
    setTimeout(() => {
        messageDiv.textContent = '';
        messageDiv.className = 'message';
    }, 3000);
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(text, type = 'info') {
    const notifications = document.getElementById('notifications');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = text;
    
    notifications.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessageToChat(message) {
    const container = document.getElementById('messagesContainer');
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    const welcome = container.querySelector('.welcome-message');
    if (welcome) {
        welcome.remove();
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message-item';
    
    const time = new Date(message.created_at).toLocaleTimeString();
    const isCurrentUser = currentUser && message.user_id === currentUser.id;
    
    messageDiv.innerHTML = `
        <div class="message-header">
            <img class="message-avatar" src="${message.avatar}" alt="${message.username}">
            <span class="message-user" style="color: ${isCurrentUser ? '#7289da' : '#43b581'}">${message.username}</span>
            <span class="message-time">${time}</span>
        </div>
        <div class="message-text">${message.content}</div>
    `;
    
    container.appendChild(messageDiv);
    container.scrollTop = container.scrollHeight;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ
function updateVoiceUsersList(users) {
    const voiceUsersContainer = document.getElementById('voiceUsers');
    
    if (users.length === 0) {
        voiceUsersContainer.innerHTML = `
            <div class="no-users">
                <i class="fas fa-microphone-slash"></i>
                <p>–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ</p>
            </div>
        `;
        return;
    }
    
    voiceUsersContainer.innerHTML = '';
    users.forEach(user => {
        const userItem = document.createElement('div');
        userItem.className = 'voice-user-item';
        userItem.innerHTML = `
            <img class="voice-user-avatar" src="${user.avatar}" alt="${user.username}">
            <div class="voice-user-info">
                <div class="voice-user-name">${user.username}</div>
                <div class="voice-user-status">üé§ –í –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ</div>
            </div>
        `;
        voiceUsersContainer.appendChild(userItem);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ–≤–æ—Ä—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function updateSpeakingUsersList(users) {
    const voiceUsersContainer = document.getElementById('voiceUsers');
    
    if (users.length === 0) {
        voiceUsersContainer.innerHTML = `
            <div class="no-users">
                <i class="fas fa-microphone-slash"></i>
                <p>–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ</p>
            </div>
        `;
        return;
    }
    
    voiceUsersContainer.innerHTML = '';
    users.forEach(user => {
        const userItem = document.createElement('div');
        userItem.className = 'voice-user-item';
        userItem.innerHTML = `
            <img class="voice-user-avatar" src="${user.avatar}" alt="${user.username}">
            <div class="voice-user-info">
                <div class="voice-user-name">${user.username}</div>
                <div class="voice-user-status speaking">üé§ –ì–æ–≤–æ—Ä–∏—Ç</div>
            </div>
        `;
        voiceUsersContainer.appendChild(userItem);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Socket.io
socket.on('authenticated', (data) => {
    console.log('‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', data);
    currentUser = data.user;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    document.getElementById('userName').textContent = currentUser.username;
    document.getElementById('userAvatar').src = currentUser.avatar;
    document.getElementById('authScreen').style.display = 'none';
    document.getElementById('chatScreen').style.display = 'flex';
    
    showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${currentUser.username}!`, 'success');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    loadOnlineUsers();
});

socket.on('auth-error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    showNotification('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
});

socket.on('rooms-list', (rooms) => {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–º–Ω–∞—Ç—ã:', rooms);
    const roomList = document.getElementById('roomList');
    roomList.innerHTML = '';
    
    rooms.forEach(room => {
        const roomItem = document.createElement('li');
        roomItem.className = 'room-item';
        roomItem.dataset.id = room.id;
        roomItem.innerHTML = `
            <i class="fas ${room.type === 'voice' ? 'fa-microphone' : 'fa-hashtag'}"></i>
            ${room.name}
        `;
        roomItem.onclick = () => joinRoom(room.id, room.name);
        roomList.appendChild(roomItem);
    });
});

socket.on('online-users', (users) => {
    console.log('üë• –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users);
    updateOnlineUsersList(users);
});

socket.on('message-history', (messages) => {
    const container = document.getElementById('messagesContainer');
    container.innerHTML = '';
    
    if (messages.length === 0) {
        container.innerHTML = `
            <div class='welcome-message'>
                <i class='fas fa-comments'></i>
                <h3>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!</h3>
                <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</p>
            </div>
        `;
        return;
    }
    
    messages.forEach(message => addMessageToChat(message));
});

socket.on('new-message', (message) => {
    addMessageToChat(message);
});

socket.on('user-joined-room', (user) => {
    const container = document.getElementById('messagesContainer');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message-item';
    messageDiv.innerHTML = `
        <div class="message-text" style="color: #43b581; text-align: center;">
            <i class="fas fa-user-plus"></i> ${user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É
        </div>
    `;
    container.appendChild(messageDiv);
    container.scrollTop = container.scrollHeight;
    
    showNotification(`üü¢ ${user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É`, 'success');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    loadOnlineUsers();
});

socket.on('user-left-room', (user) => {
    const container = document.getElementById('messagesContainer');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message-item';
    messageDiv.innerHTML = `
        <div class="message-text" style="color: #f04747; text-align: center;">
            <i class="fas fa-user-times"></i> ${user.username} –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª
        </div>
    `;
    container.appendChild(messageDiv);
    container.scrollTop = container.scrollHeight;
    
    showNotification(`‚ö´ ${user.username} –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª`, 'error');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    loadOnlineUsers();
});

// –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç —Å–æ–±—ã—Ç–∏—è
socket.on('user-joined-voice', (user) => {
    showNotification(`üé§ ${user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É`, 'success');
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    loadOnlineUsers();
});

socket.on('user-left-voice', (username) => {
    showNotification(`üé§ ${username} –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞`, 'warning');
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    loadOnlineUsers();
});

socket.on('voice-users-update', (users) => {
    console.log('üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ:', users);
    updateVoiceUsersList(users);
});

socket.on('speaking-users-update', (users) => {
    console.log('üé§ –ì–æ–≤–æ—Ä—è—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users);
    updateSpeakingUsersList(users);
});

// WebRTC —Å–æ–±—ã—Ç–∏—è
socket.on('user-peer-id', (data) => {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —Å PeerID:', data.peerId);
    if (isInVoiceChat && data.userId !== currentUser.id) {
        callUser(data.peerId);
    }
});

socket.on('connect', () => {
    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
    showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
});

socket.on('disconnect', () => {
    console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    showNotification('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', 'error');
});

socket.on('connect_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
    document.getElementById('loading').style.display = 'none';
    showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Enter
document.getElementById('messageInput').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ('Notification' in window && Notification.permission === 'default') {
        Notification.requestPermission();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã
    const hasMicrophone = await checkMicrophoneAvailability();
    if (!hasMicrophone) {
        const joinBtn = document.getElementById('joinVoiceBtn');
        if (joinBtn) {
            joinBtn.disabled = true;
            joinBtn.innerHTML = '<i class="fas fa-microphone-slash"></i> –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω';
        }
    }
    
    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞—Ä–∞–Ω–µ–µ
    if (navigator.mediaDevices) {
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                stream.getTracks().forEach(track => track.stop());
            })
            .catch(() => {
                // Ignore error - –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            });
    }
});