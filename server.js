const express = require('express');
const socketIo = require('socket.io');
const http = require('http');
const path = require('path');
const bcrypt = require('bcryptjs');
const sqlite3 = require('sqlite3').verbose();

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'neocord.db');
const db = new sqlite3.Database(dbPath);

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/register', async (req, res) => {
    try {
        const { username, password, email } = req.body;
        console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', username);

        if (!username || !password) {
            return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.get('SELECT id FROM users WHERE username = ?', [username], async (err, row) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã:', err);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            }

            if (row) {
                return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–æ' });
            }

            // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            const hashedPassword = await bcrypt.hash(password, 10);
            const avatar = `https://ui-avatars.com/api/?name=${encodeURIComponent(username)}&background=7289da&color=fff&size=256`;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.run(
                'INSERT INTO users (username, password, email, avatar) VALUES (?, ?, ?, ?)',
                [username, hashedPassword, email, avatar],
                function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
                        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
                    }

                    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω. ID:', this.lastID);
                    
                    res.json({
                        success: true,
                        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!',
                        user: {
                            id: this.lastID,
                            username,
                            avatar
                        }
                    });
                }
            );
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/login', async (req, res) => {
    try {
        const { username, password } = req.body;
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', username);

        if (!username || !password) {
            return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.get('SELECT * FROM users WHERE username = ?', [username], async (err, user) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã:', err);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            }

            if (!user) {
                return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            const isValid = await bcrypt.compare(password, user.password);
            if (!isValid) {
                return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            db.run('UPDATE users SET status = ? WHERE id = ?', ['online', user.id]);

            res.json({
                success: true,
                message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!',
                user: {
                    id: user.id,
                    username: user.username,
                    avatar: user.avatar
                }
            });
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
app.get('/api/rooms', (req, res) => {
    db.all('SELECT * FROM rooms ORDER BY name', (err, rooms) => {
        if (err) {
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
        }
        res.json(rooms);
    });
});

// –ü–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/online-users', (req, res) => {
    db.all('SELECT id, username, avatar, status FROM users WHERE status = ?', ['online'], (err, users) => {
        if (err) {
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
        }
        res.json(users);
    });
});

// WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const activeUsers = new Map();
const voiceUsers = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function updateOnlineUsers() {
    const onlineUsers = Array.from(activeUsers.values()).map(user => ({
        id: user.userId,
        username: user.username,
        avatar: user.avatar,
        status: 'online'
    }));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('online-users', onlineUsers);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ
function updateVoiceUsers(roomId) {
    const voiceUsersList = Array.from(voiceUsers.values())
        .filter(user => user.roomId === roomId)
        .map(user => ({
            id: user.userId,
            username: user.username,
            avatar: user.avatar
        }));
    
    io.to(roomId).emit('voice-users-update', voiceUsersList);
}

io.on('connection', (socket) => {
    console.log('üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on('authenticate', (userData) => {
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', userData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        db.get('SELECT * FROM users WHERE id = ?', [userData.userId], (err, user) => {
            if (err || !user) {
                console.log('‚ùå WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è failed: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                socket.emit('auth-error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log('‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', user.username);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            activeUsers.set(socket.id, {
                userId: user.id,
                username: user.username,
                avatar: user.avatar,
                socketId: socket.id
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            socket.emit('authenticated', {
                user: {
                    id: user.id,
                    username: user.username,
                    avatar: user.avatar
                }
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—ã
            db.all('SELECT * FROM rooms ORDER BY name', (err, rooms) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', err);
                    return;
                }
                socket.emit('rooms-list', rooms);
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            updateOnlineUsers();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            db.run('UPDATE users SET status = ? WHERE id = ?', ['online', user.id]);
        });
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('join-room', (roomId) => {
        const user = activeUsers.get(socket.id);
        if (!user) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã');
            return;
        }

        console.log(`üéØ ${user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);

        // –ü–æ–∫–∏–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
        if (socket.roomId) {
            socket.leave(socket.roomId);
            socket.to(socket.roomId).emit('user-left-room', {
                username: user.username,
                avatar: user.avatar
            });
        }

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
        socket.roomId = roomId;
        socket.join(roomId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        db.all(`
            SELECT m.*, u.username, u.avatar 
            FROM messages m 
            JOIN users u ON m.user_id = u.id 
            WHERE m.room_id = ? 
            ORDER BY m.created_at DESC 
            LIMIT 100
        `, [roomId], (err, messages) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
                return;
            }
            socket.emit('message-history', messages.reverse());
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        socket.to(roomId).emit('user-joined-room', {
            username: user.username,
            avatar: user.avatar
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ (–ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã)
        db.get('SELECT * FROM rooms WHERE id = ?', [roomId], (err, room) => {
            if (!err && room) {
                socket.emit('room-info', room);
            }
        });
    });

    // –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    socket.on('join-voice', () => {
        const user = activeUsers.get(socket.id);
        if (!user || !socket.roomId) return;

        console.log(`üé§ ${user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É`);

        voiceUsers.set(socket.id, {
            userId: user.userId,
            username: user.username,
            avatar: user.avatar,
            roomId: socket.roomId,
            socketId: socket.id
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
        socket.to(socket.roomId).emit('user-joined-voice', {
            username: user.username,
            avatar: user.avatar
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ
        updateVoiceUsers(socket.roomId);
    });

    // –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç - –≤—ã—Ö–æ–¥
    socket.on('leave-voice', () => {
        const user = activeUsers.get(socket.id);
        if (!user || !socket.roomId) return;

        console.log(`üé§ ${user.username} –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞`);

        voiceUsers.delete(socket.id);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
        socket.to(socket.roomId).emit('user-left-voice', user.username);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ
        updateVoiceUsers(socket.roomId);
    });

    // WebRTC —Å–∏–≥–Ω–∞–ª—ã
    socket.on('webrtc-offer', (data) => {
        console.log('üìû WebRTC offer –æ—Ç:', data.from);
        socket.to(data.to).emit('webrtc-offer', {
            offer: data.offer,
            from: socket.id
        });
    });

    socket.on('webrtc-answer', (data) => {
        console.log('üìû WebRTC answer –æ—Ç:', data.from);
        socket.to(data.to).emit('webrtc-answer', {
            answer: data.answer,
            from: socket.id
        });
    });

    socket.on('webrtc-ice-candidate', (data) => {
        socket.to(data.to).emit('webrtc-ice-candidate', {
            candidate: data.candidate,
            from: socket.id
        });
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('send-message', (data) => {
        const user = activeUsers.get(socket.id);
        if (!user || !socket.roomId) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db.run(
            'INSERT INTO messages (room_id, user_id, content) VALUES (?, ?, ?)',
            [socket.roomId, user.userId, data.text],
            function(err) {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                    return;
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
                io.to(socket.roomId).emit('new-message', {
                    id: this.lastID,
                    room_id: socket.roomId,
                    user_id: user.userId,
                    content: data.text,
                    created_at: new Date(),
                    username: user.username,
                    avatar: user.avatar
                });

                console.log(`üí¨ ${user.username}: ${data.text}`);
            }
        );
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    socket.on('disconnect', () => {
        const user = activeUsers.get(socket.id);
        if (user) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', user.username);
            
            // –í—ã—Ö–æ–¥–∏–º –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ –µ—Å–ª–∏ –±—ã–ª
            if (voiceUsers.has(socket.id)) {
                voiceUsers.delete(socket.id);
                if (socket.roomId) {
                    socket.to(socket.roomId).emit('user-left-voice', user.username);
                    updateVoiceUsers(socket.roomId);
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            db.run('UPDATE users SET status = ? WHERE id = ?', ['offline', user.userId]);
            
            activeUsers.delete(socket.id);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
            if (socket.roomId) {
                socket.to(socket.roomId).emit('user-left-room', {
                    username: user.username,
                    avatar: user.avatar
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            updateOnlineUsers();
        }
    });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const PORT = 3000;
server.listen(PORT, () => {
    console.log('===================================');
    console.log('üöÄ NEO-CORD SERVER STARTED');
    console.log('===================================');
    console.log(`üìç Port: ${PORT}`);
    console.log(`üåê URL: http://localhost:${PORT}`);
    console.log('‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    console.log('‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('===================================');
});